multClasica(Entero820 a, Entero820 b) : EnteroLargo r {
    EnteroLargo resultado;
    
    para i:= 0 hasta a.longitud hacer
        EnteroLargo parcial;
        para j:= 0 hasta b.longitud hacer
            EnteroLargo mult := b.digitos[i] * a.digitos[j];
            mult.desplazar(j);
            parcial := parcial + mult;
        fin_para
        parcial.desplazar(i);
        resultado = resultado + parcial;
    fin_para
    devuelve resultado;
            
}

multNoRapida(Entero820 a, Entero820 b) : EnteroLargo r {
    si (a.longitud == 1 OR b.longitud == 1) entonces devuelve a * b
    si_no
        entero s = a.longitud/2;
        EnteroLargo w := a.dividir(true);
        EnteroLargo x := a.dividir(false);
        EnteroLargo y := b.dividir(true);
        EnteroLargo z := b.dividir(false);
        
        EnteroLargo m1 = multNoRapida(w,y);
        m1.desplazar(2*s);
        EnteroLargo m2 = multNoRapida(w,z) + multNoRapida(x,y);
        m2.desplazar(s);
        EnteroLargo m3 = multNoRapida(x,z);
        
        devolver m1+ m2 + m3;
    fin_si
}

multKarat(Entero820 a, Entero820 b) : EnteroLargo r {
    si (a.longitud == 1 OR b.longitud == 1) entonces devuelve a * b
    si_no
        entero s = a.longitud/2;
    
        EnteroLargo w := a.primeraMitad();
        EnteroLargo x := a.segundaMitad();
        EnteroLargo y := b.primeraMitad();
        EnteroLargo z := b.segundaMitad();
        
        EnteroLargo m1 = multKarat(w,y);
        EnteroLargo m3 = multKarat(x,z);
        EnteroLargo m2 = multKarat(w-x,z-y);
        m2 = m2 + m1 + m3;
    
        m1.desplazar(2*s);
        m2.desplazar(s);
        
        devolver m1+ m2 + m3;
    fin_si
}